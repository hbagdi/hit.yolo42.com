var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/help/",title:"Help",description:"Seek help with hit.",content:""}).add({id:1,href:"/docs/reference/",title:"Reference",description:"Install hit",content:""}).add({id:2,href:"/docs/install/introduction/",title:"Introduction",description:"hit is a command to manage and make HTTP requests.",content:"What is hit? # Hit is a command line program to manage and make HTTP requests. Hit lets you express complex HTTP requests in plain text files. Hit supports JSON and YAML to express the body of the request and allows composition of responses from previous HTTP requests into an HTTP request.\nHit could be compared with GUI-based tools like Postman, Insomnia, Paw, etc. Hit attempts to solve a problem similar to these tools but using Unix philosophies and with a focus on a superior command-line experience.\n"}).add({id:3,href:"/docs/reference/introduction/",title:"Introduction",description:"Doks is a Hugo theme for building secure, fast, and SEO-ready documentation websites, which you can easily update and customize.",content:"Get started # There are two main ways to get started with Doks:\nTutorial # ðŸ‘‰  The Tutorial is intended for novice to intermediate users.   Step-by-step instructions on how to start a new Doks project. Tutorial â†’\nQuick Start # ðŸ‘‰  The Quick Start is intended for intermediate to advanced users.   One page summary of how to start a new Doks project. Quick Start â†’\nGo further # Recipes, Reference Guides, Extensions, and Showcase.\nRecipes # Get instructions on how to accomplish common tasks with Doks. Recipes â†’\nReference Guides # Learn how to customize Doks to fully make it your own. Reference Guides â†’\nExtensions # Get instructions on how to add even more to Doks. Extensions â†’\nShowcase # See what others have build with Doks. Showcase â†’\nContributing # Find out how to contribute to Doks. Contributing â†’\n"}).add({id:4,href:"/docs/install/install/",title:"Install hit",description:"Install hit",content:"macOS # brew install hbagdi/tap/hit  Linux # Grab the binary from the release page and install:\ncurl -sL https://github.com/hbagdi/hit/releases/download/v0.1.0/hit_0.1.0_linux_amd64.tar.gz -o hit.tar.gz tar -xf hit.tar.gz -C /tmp sudo cp /tmp/hit /usr/local/bin/  "}).add({id:5,href:"/docs/install/quick-start/",title:"Quick Start",description:"One page summary of how to use hit.",content:"Requirements #  Install hit. Please refer the installation guide.  Verify hit is installed correctly # hit version  It should output the version of hit that is currently installed on your system.\nCreate your first hit file # Create a hit file using the following command:\necho ' @_global base_url=http://httpbin.org version=1 @r0 GET /headers foo: bar baz: qux ' \u0026gt; hello.hit  The above file defines a couple of things:\n @_global section defines hit settings that apply to all files in the current directory. Two global properties are defined, base_url and version. All requests are constructed on top of the base_url. version is the version of the hit file - the only valid version is 1. @r0 section defines an HTTP request with an ID of r0. The line after the ID, in this case \u0026lsquo;GET\u0026rsquo; defines the HTTP method used to construct the request. Next line is the HTTP request line, popularly known as the HTTP path of the request. Lines after the path are HTTP headers for the request.  With that bit of background, let\u0026rsquo;s go ahead and hit your first HTTP request:\nhit @c0  The above command instructs hit to load all files in the present workibng directory and initiate the c0 request. The request and response are printed on the screen. It should look something like:\nGET /headers HTTP/1.1 Host: httpbin.org User-Agent: Go-http-client/1.1 foo-header: bar Accept-Encoding: gzip HTTP/1.1 200 OK Content-Length: 216 Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: * Connection: keep-alive Content-Type: application/json Date: Wed, 30 Mar 2022 04:18:33 GMT Server: gunicorn/19.9.0 { \u0026quot;headers\u0026quot;: { \u0026quot;Accept-Encoding\u0026quot;: \u0026quot;gzip\u0026quot;, \u0026quot;Foo-Header\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;Host\u0026quot;: \u0026quot;httpbin.org\u0026quot;, \u0026quot;User-Agent\u0026quot;: \u0026quot;Go-http-client/1.1\u0026quot;, \u0026quot;X-Amzn-Trace-Id\u0026quot;: \u0026quot;Root=1-6243da19-708fb5131135b2582a339aaa\u0026quot; } }  Congratulations! You hit your first HTTP request successfully.\n"}).add({id:6,href:"/docs/reference/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Doks project.",content:"Requirements #  Download and install Node.js (it includes npm) for your platform.  Start a new Doks project # Create a new site, change directories, install dependencies, and start development server.\nCreate a new site # Doks is available as a child theme, and a starter theme:\n Use the Doks child theme, if you do not plan to customize a lot, and/or need future Doks updates. Use the Doks starter theme, if you plan to customize a lot, and/or do not need future Doks updates.  Not quite sure? Use the Doks child theme.\nDoks child theme # git clone https://github.com/h-enk/doks-child-theme.git my-doks-site  Doks starter theme # git clone https://github.com/h-enk/doks.git my-doks-site  Change directories # cd my-doks-site  Install dependencies # npm start  Start development server # npm run start  Doks will start the Hugo development webserver accessible by default at http://localhost:1313. Saved changes will live reload in the browser.\nOther commands # Doks comes with commands for common tasks. Commands â†’\n"}).add({id:7,href:"/docs/install/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:"ðŸ’¡  You can change the commands in the scripts section of `./package.json`.   create # Create new content for your site:\nnpm run create [path] [flags]  See also the Hugo docs: hugo new.\nlint # Check scripts, styles, and markdown for errors:\nnpm run lint  scripts # Check scripts for errors:\nnpm run lint:scripts [-- --fix]  styles # Check styles for errors:\nnpm run lint:styles [-- --fix]  markdown # Check markdown for errors:\nnpm run lint:markdown [-- --fix]  clean # Delete temporary directories:\nnpm run clean  start # Start local development server:\nnpm run start  build # Build production website:\nnpm run build  functions # Build Lambda functions:\nnpm run build:functions  preview # Build production website including draft and future content:\nnpm run build:preview  "}).add({id:8,href:"/docs/reference/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:"ðŸ’¡  You can change the commands in the scripts section of `./package.json`.   create # Create new content for your site:\nnpm run create [path] [flags]  See also the Hugo docs: hugo new.\nlint # Check scripts, styles, and markdown for errors:\nnpm run lint  scripts # Check scripts for errors:\nnpm run lint:scripts [-- --fix]  styles # Check styles for errors:\nnpm run lint:styles [-- --fix]  markdown # Check markdown for errors:\nnpm run lint:markdown [-- --fix]  clean # Delete temporary directories:\nnpm run clean  start # Start local development server:\nnpm run start  build # Build production website:\nnpm run build  functions # Build Lambda functions:\nnpm run build:functions  preview # Build production website including draft and future content:\nnpm run build:preview  "}).add({id:9,href:"/docs/install/",title:"Quick start",description:"Quick start guides",content:""}).add({id:10,href:"/docs/help/seeking-help/",title:"Seeking help",description:"Seek help with hit.",content:"Hello world\n"}).add({id:11,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()