var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/help/",title:"Help",description:"Seek help with hit.",content:""}).add({id:1,href:"/docs/reference/",title:"Reference",description:"Install hit",content:""}).add({id:2,href:"/docs/install/introduction/",title:"Introduction",description:"hit is a command to manage and make HTTP requests.",content:"What is hit? # Hit is a command line program to manage and make HTTP requests. Hit lets you express complex HTTP requests in plain text files. Hit supports JSON and YAML to express the body of the request and allows composition of responses from previous HTTP requests into an HTTP request.\nHit could be compared with GUI-based tools like Postman, Insomnia, Paw, etc. Hit attempts to solve a problem similar to these tools but using Unix philosophies and with a focus on a superior command-line experience.\n"}).add({id:3,href:"/docs/install/install/",title:"Install hit",description:"Install hit",content:"macOS # brew install hbagdi/tap/hit  Linux # Grab the binary from the release page and install:\ncurl -sL https://github.com/hbagdi/hit/releases/download/v0.1.0/hit_0.1.0_linux_amd64.tar.gz -o hit.tar.gz tar -xf hit.tar.gz -C /tmp sudo cp /tmp/hit /usr/local/bin/  "}).add({id:4,href:"/docs/install/quick-start/",title:"Quick Start",description:"A summary of how to use hit.",content:"Install hit # macOS # brew install hbagdi/tap/hit  Linux # Grab the binary from the release page and install:\ncurl -sL https://github.com/hbagdi/hit/releases/download/v0.1.0/hit_0.1.0_linux_amd64.tar.gz -o hit.tar.gz tar -xf hit.tar.gz -C /tmp sudo cp /tmp/hit /usr/local/bin/  Verify hit is installed correctly # hit version  It should output the version of hit that is currently installed on your system.\nCreate your first hit file # Create a hit file using the following command:\necho ' @_global base_url=https://httpbin.org version=1 @c0 GET /headers foo: bar baz: qux ' \u0026gt; quick-start.hit  The above file defines a couple of things:\n @_global section defines hit settings that apply to all files in the current directory. Two global properties are defined, base_url and version. All requests are constructed on top of the base_url. version is the version of the hit file - the only valid version is 1. @r0 section defines an HTTP request with an ID of r0. The line after the ID, in this case \u0026lsquo;GET\u0026rsquo; defines the HTTP method used to construct the request. Next line is the HTTP request line, popularly known as the HTTP path of the request. Lines after the path are HTTP headers for the request.  With that bit of background, let\u0026rsquo;s go ahead and hit your first HTTP request:\nhit @c0  The above command instructs hit to load all files in the present workibng directory and initiate the c0 request. The request and response are printed on the screen. It should look something like:\nGET /headers HTTP/1.1 Host: httpbin.org User-Agent: Go-http-client/1.1 foo-header: bar Accept-Encoding: gzip HTTP/1.1 200 OK Content-Length: 216 Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: * Connection: keep-alive Content-Type: application/json Date: Wed, 30 Mar 2022 04:18:33 GMT Server: gunicorn/19.9.0 { \u0026quot;headers\u0026quot;: { \u0026quot;Accept-Encoding\u0026quot;: \u0026quot;gzip\u0026quot;, \u0026quot;Foo-Header\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;Host\u0026quot;: \u0026quot;httpbin.org\u0026quot;, \u0026quot;User-Agent\u0026quot;: \u0026quot;Go-http-client/1.1\u0026quot;, \u0026quot;X-Amzn-Trace-Id\u0026quot;: \u0026quot;Root=1-6243da19-708fb5131135b2582a339aaa\u0026quot; } }  Congratulations! You hit your first HTTP request successfully.\nEnable auto-completion # Let\u0026rsquo;s first enable shell auto-completion to save some keystrokes.\nsource \u0026lt;(hit completion)  You can type hit and press the TAB key to see suggestions. In the above file, there is only request so your shell will automatically complete the prompt to hit @c0.\nAn advanced example - Nodes API # Next, let\u0026rsquo;s grab a hit file that does more than a GET request.\ncurl --silent https://hit.yolo42.com/quick-start.hit --output quick-start.hit  Create a root node for the tree using hit.\nhit @gen-root-node  Next, we are going to create a child node under the root node:\nhit @create-node \u0026quot;buy-groceries\u0026quot; @gen-root-node.id  In the above command, the parameter @gen-root-node.id references the id field from the latest response body of the @gen-root-node request.\nLet\u0026rsquo;s create another node under the node that we just created.\nhit @create-node \u0026quot;tomatoes\u0026quot; @create-node.id  Let\u0026rsquo;s take a look at tour grocery list.\nhit @get-node @create-node.parent_id  Let\u0026rsquo;s go ahead and add a couple of items.\nhit @create-node \u0026quot;potatoes\u0026quot; @get-node.id hit @create-node \u0026quot;milk\u0026quot; @get-node.id  Let\u0026rsquo;s grab our grocery list now.\nhit @get-node @get-node.id  Let\u0026rsquo;s delete an item, let\u0026rsquo;s delete the first item in the grocery list.\nhit @delete-node @get-node.children.0.id  Grab the grocery list again\nhit @get-node @get-node.id  "}).add({id:5,href:"/docs/reference/commands/",title:"Commands",description:"Commands in the hit program",content:"hit\u0026rsquo;s goals is to be as simple and straight-forward to use as possible. And in that spirit the number of command that hit supports is fairly small. For hitting HTTP requests, the core hit command should be sufficient most of the time.\nFor other situations, there are a few other commands avaialble:\nversion # Output the version of the hit command.\nFor example:\n$ hit version v0.1.0 (commit: f563300)  "}).add({id:6,href:"/docs/install/",title:"Quick start",description:"Quick start guides",content:""}).add({id:7,href:"/docs/help/seeking-help/",title:"Seeking help",description:"Seek help with hit.",content:"If you are stuck or happen to run into a bug, please open a Github issue on the hbagdi/hit repository to seek help.\n"}).add({id:8,href:"/docs/",title:"Docs",description:"Docs for hit",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()