var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/help/",title:"Help",description:"Seek help with hit.",content:""}).add({id:1,href:"/docs/help/seeking-help/",title:"Seeking help",description:"Seek help with hit.",content:"If you happen to run into a use-case that hit does not yet support or happen to have trouble in using hit, please reach out to us. We will be happy to assist you!\nFinding help # If you run into a cryptic error or have trouble using hit, please open a Github issue on the hbagdi/hit repository.\nReporting bugs # To report bugs, please open a Github issue on the hbagdi/hit repository.\nContributing to the project # Hit is an open-source project - you are welcome to contribute! If you are interested, please check out open issues on our Github repository. We are working on a plan to compensating contributors - stay tuned!\n"}).add({id:2,href:"/docs/reference/",title:"Reference",description:"Install hit",content:""}).add({id:3,href:"/docs/reference/commands/",title:"Commands",description:"Commands in the hit program",content:"hit\u0026rsquo;s goals is to be as simple and straight-forward to use as possible. And in that spirit the number of command that hit supports is fairly small. For hitting HTTP requests, the core hit command should be sufficient most of the time.\nFor other situations, there are a few other commands available:\nversion # Output the version of the hit command.\nFor example:\n$ hit version v0.1.0 (commit: f563300)  "}).add({id:4,href:"/docs/guides/",title:"Guides",description:"Tutorials on using various features in hit",content:""}).add({id:5,href:"/docs/concepts/",title:"Concepts",description:"Core concepts of hit",content:""}).add({id:6,href:"/docs/concepts/introduction/",title:"Introduction",description:"hit is a command to manage and make HTTP requests.",content:"Hit lets you express complex HTTP requests in simple formats and create workflows out of these requests. It allows you to express complex requests as composition of responses from previous HTTP requests.\nHit was born out of frustration with using the history command to look up curl invocations. For folks working with HTTP-based APIs, this is probably a relatable experience. Tracking requests in your shell history works, but it becomes cumbersome to fetch the previous requests reliably and quickly.\nHit takes a new approach to making and managing such requests. All requests and responses are tracked and templates out of requests can be made easily. Because of the text-based nature of request formats, request templates can be created quickly using a text-editor of choice. Request templates allow for input during execution as well as referencing of values from response of any past request execution. The templates can then be mixed and matched to execute complex request patterns quickly.\n"}).add({id:7,href:"/docs/concepts/hit-files/",title:"Hit files",description:"hit files are at the center of hit command. Request templates and parameters are defined using text files and then used during command execution to send requests. hit files can be edited like any other file containing code, and it is friendly to SCM tools like git. The files can be shared with colleagues and users to collaborate.\nBasics of hit file # Let\u0026rsquo;s take a look at a basic hit file.",content:"hit files are at the center of hit command. Request templates and parameters are defined using text files and then used during command execution to send requests. hit files can be edited like any other file containing code, and it is friendly to SCM tools like git. The files can be shared with colleagues and users to collaborate.\nBasics of hit file # Let\u0026rsquo;s take a look at a basic hit file.\n# demo.hit # Lines starting with '#' are comments. # `@_global` indicates a global section. # A directory containing .hit files must have exactly one @_global section. # Global section defines properties that apply to all requests # within the parent directory. @_global base_url=https://httpbin.org # `version` defines the format version of `.hit` files itself. version=1 # Each request definition begins with an identifier definition. # The identifier - `@c0` in this case - must be unique and is used to # reference the request template and historical executions based on the # template. @c0 # This line defines the HTTP method for the request. Required. GET # This line defines the HTTP path for the request. Required. /headers # One or more headers. Optional. foo: bar baz: qux # Another request. At least one empty line must be present between two # subsequent requests. @c1 POST /post foo-header: bar # Line beginning with `~` tells `hit` how to read the body. `y2j` format # instructs hit to read the body as YAML and send it as JSON in the request # to the server. ~y2j # lines containing the body of the request name: hit description: make and manage HTTP requests url: https://hit.yolo42.com ## And so on  Multiple hit files and directories # hit command automatically loads up all .hit files from the current working directory. No additional flags or commands have to be specified to load hit files. hit does not read .hit files from subdirectories.\n"}).add({id:8,href:"/docs/get-started/",title:"Get started",description:"Set up and execute your first requests.",content:""}).add({id:9,href:"/docs/get-started/install/",title:"Install hit",description:"Install hit",content:"Hit is a single binary program and extremely easy to install. Below are installation instructions based on your Operating System (OS):\nmacOS # brew install hbagdi/tap/hit  Linux # Grab the binary from the release page and install:\ncurl -sL https://github.com/hbagdi/hit/releases/download/v0.1.0/hit_0.1.0_linux_amd64.tar.gz \\ -o /tmp/hit.tar.gz tar -xf /tmp/hit.tar.gz -C /tmp sudo cp /tmp/hit /usr/local/bin/  Verify hit installation # hit version  The command will print the version of hit installed on your system.\nUsing hit # Once installed, please head over to the quick-start guide to execute your first request.\n"}).add({id:10,href:"/docs/get-started/quick-start/",title:"Quick Start",description:"A summary of how to use hit.",content:"Install hit # macOS # brew install hbagdi/tap/hit  Linux # Grab the binary from the release page and install:\ncurl -sL https://github.com/hbagdi/hit/releases/download/v0.1.0/hit_0.1.0_linux_amd64.tar.gz -o hit.tar.gz tar -xf hit.tar.gz -C /tmp sudo cp /tmp/hit /usr/local/bin/  Verify hit is installed correctly # hit version  It should output the version of hit that is currently installed on your system.\nCreate your first hit file # Create a hit file using the following command:\necho ' @_global base_url=https://httpbin.org version=1 @c0 GET /headers foo: bar baz: qux ' \u0026gt; quick-start.hit  The above file defines a couple of things:\n @_global section defines hit settings that apply to all files in the current directory. Two global properties are defined, base_url and version. All requests are constructed on top of the base_url. version is the version of the hit file - the only valid version is 1. @c0 section defines an HTTP request with an ID of r0. The line after the ID, in this case \u0026lsquo;GET\u0026rsquo; defines the HTTP method used for the request. Next line is the HTTP request line, popularly known as the HTTP path of the request. Lines after the path are have key-value pairs defining HTTP headers for the request.  With that bit of background, go ahead and hit your first HTTP request:\nhit @c0  The above command instructs hit to load all files in the present working directory and initiate the c0 request. The request and response are printed on the screen. It should look something like:\nGET /headers HTTP/1.1 Host: httpbin.org User-Agent: Go-http-client/1.1 foo-header: bar Accept-Encoding: gzip HTTP/1.1 200 OK Content-Length: 216 Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: * Connection: keep-alive Content-Type: application/json Date: Wed, 30 Mar 2022 04:18:33 GMT Server: gunicorn/19.9.0 { \u0026quot;headers\u0026quot;: { \u0026quot;Accept-Encoding\u0026quot;: \u0026quot;gzip\u0026quot;, \u0026quot;Foo-Header\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;Host\u0026quot;: \u0026quot;httpbin.org\u0026quot;, \u0026quot;User-Agent\u0026quot;: \u0026quot;Go-http-client/1.1\u0026quot;, \u0026quot;X-Amzn-Trace-Id\u0026quot;: \u0026quot;Root=1-6243da19-708fb5131135b2582a339aaa\u0026quot; } }  Congratulations! You hit your first HTTP request successfully.\nEnable auto-completion # Let\u0026rsquo;s first enable shell auto-completion to save some keystrokes.\nsource \u0026lt;(hit completion)  You can type hit and press the TAB key to see suggestions. In the above file, there is only request so your shell will automatically complete the prompt to hit @c0.\nAn advanced example - Nodes API # Next, let\u0026rsquo;s grab a hit file that does more than a GET request.\ncurl --silent https://hit.yolo42.com/quick-start.hit --output quick-start.hit  This API helps build a tree-based data-structure. Let\u0026rsquo;s go ahead and create the root node of the tree:\nhit @gen-root-node  Next, we are going to create a child node under the root node:\nhit @create-node \u0026quot;buy-groceries\u0026quot; @gen-root-node.id  In the above command, the parameter @gen-root-node.id references the id field from the latest response body of the @gen-root-node request.\nLet\u0026rsquo;s create another node under the node that we just created.\nhit @create-node \u0026quot;tomatoes\u0026quot; @create-node.id  Let\u0026rsquo;s take a look at tour grocery list.\nhit @get-node @create-node.parent_id  Let\u0026rsquo;s go ahead and add a couple of items.\nhit @create-node \u0026quot;potatoes\u0026quot; @get-node.id hit @create-node \u0026quot;milk\u0026quot; @get-node.id  Let\u0026rsquo;s grab our grocery list now.\nhit @get-node @get-node.id  Let\u0026rsquo;s delete an item, let\u0026rsquo;s delete the first item in the grocery list.\nhit @delete-node @get-node.children.0.id  Grab the grocery list again\nhit @get-node @get-node.id  Hope you get the idea! hit hides away internal details of the API and provides a simple and intuitive interface to exectue requests defined as templates.\n"}).add({id:11,href:"/docs/",title:"Docs",description:"Docs for hit",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()