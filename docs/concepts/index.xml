<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on</title><link>https://hit.yolo42.com/docs/concepts/</link><description>Recent content in Concepts on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://hit.yolo42.com/docs/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://hit.yolo42.com/docs/concepts/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hit.yolo42.com/docs/concepts/introduction/</guid><description>Hit lets you express complex HTTP requests in simple formats and create workflows out of these requests. It allows you to express complex requests as composition of responses from previous HTTP requests.
Hit was born out of frustration with using the history command to look up curl invocations. For folks working with HTTP-based APIs, this is probably a relatable experience. Tracking requests in your shell history works, but it becomes cumbersome to fetch the previous requests reliably and quickly.</description></item><item><title>Hit files</title><link>https://hit.yolo42.com/docs/concepts/hit-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hit.yolo42.com/docs/concepts/hit-files/</guid><description>hit files are at the center of hit command. Request templates and parameters are defined using text files and then used during command execution to send requests. hit files can be edited like any other file containing code, and it is friendly to SCM tools like git. The files can be shared with colleagues and users to collaborate.
Basics of hit file # Let&amp;rsquo;s take a look at a basic hit file.</description></item></channel></rss>